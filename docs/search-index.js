var searchIndex = {};
searchIndex["chess"] = {"doc":"A basic chess backend.","items":[[3,"Piece","chess","The chess piece struct.",null,null],[12,"color","","The color of the chess piece.",0,null],[12,"kind","","The type of chess piece.",0,null],[3,"Game","","The game struct.",null,null],[4,"Kind","","The different kinds of chess pieces.",null,null],[13,"King","","",1,null],[13,"Queen","","",1,null],[13,"Knight","","",1,null],[13,"Bishop","","",1,null],[13,"Rook","","",1,null],[13,"Pawn","","",1,null],[4,"Color","","The different colors of chess pieces.",null,null],[13,"White","","",2,null],[13,"Black","","",2,null],[4,"Victory","","The different types of victories.",null,null],[13,"Checkmate","","",3,null],[13,"Stalemate","","",3,null],[13,"Draw","","",3,null],[5,"string_to_pos","","Turns a position on the board from a string, like B3, to a tuple, like (1, 2).",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"pos_to_string","","Turns a position on the board from a tuple, like (3, 5), to proper chess notation, like D6.",null,null],[7,"WHITE","","An array of all the white chess pieces.",null,null],[7,"BLACK","","An array of all the black chess pieces.",null,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",4,null],[11,"new","","Creates a new game, with all the pieces in the correct starting position.",4,{"inputs":[],"output":{"name":"game"}}],[11,"new_empty","","Creates a new game with an empty board.",4,{"inputs":[],"output":{"name":"game"}}],[11,"clear","","Clears the board.",4,null],[11,"ignore_kings","","Tells the game whether to ignore a lack of kings.",4,null],[11,"ignore_check","","Tells the game whether to ignore check tests.",4,null],[11,"get_from_pos","","Gets the piece at the given position on the board.",4,null],[11,"set_at_pos","","Sets the piece at the given position on the board.",4,null],[11,"get_turn","","Returns the current turn.",4,null],[11,"next_turn","","Advances the game to the next turn.",4,null],[11,"by_color","","Returns a vector of all pieces of a given color, and their position on the board.",4,null],[11,"by_kind","","Returns a vector of all pieces of a given kind, and their position on the board.",4,null],[11,"by_kind_and_color","","Returns a vector of all pieces of a given kind and color, and their position on the board.",4,null],[11,"move_piece","","Moves a piece from one position to another.",4,null],[11,"move_pieces","","Executes several moves, as stated in the given array.",4,null],[11,"valid_moves","","Returns a vector of all the moves the piece at the given position can make.",4,null],[11,"in_check","","Sees whether the king of the given color is currently in check or not.",4,null],[11,"check_victory","","Checks whether the game is won, and returns the victory type and the color of the victor,\nor None if the game isn&#39;t won yet. In case of a draw a random color is returned.",4,null],[11,"move_to_an","","Turns a move, as returned from `valid_moves`, into [algebraic\nnotation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)) (AN).",4,null],[11,"an_to_move","","Turns a string in [algebraic\nnotation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)) (AN) into a move that can be passed to `move_pieces`.",4,null],[11,"move_to_string","","Turns a move tuple into a human readable description.",4,null],[11,"moves_to_string","","Turns an array of move tuples, like entries returned from valid_moves, into a human readable description.",4,null],[11,"board_to_string","","Returns the game board as a string.",4,null],[11,"three_fold_repetition","","Checks whether there has occured a three fold repetition.",4,null],[11,"fifty_move_rule","","Checks whether a player can invoke the fifty-move-rule",4,null]],"paths":[[3,"Piece"],[4,"Kind"],[4,"Color"],[4,"Victory"],[3,"Game"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
